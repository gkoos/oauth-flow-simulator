openapi: 3.0.3
info:
  title: OAuth Flow Simulator Management API
  version: 1.0.0
  description: API for managing users and clients (with per-client scopes) at runtime.
servers:
  - url: http://localhost:4000
paths:
  /revoke:
    post:
      summary: OAuth2 Token Revocation Endpoint
      description: |
        Revokes an access token or refresh token as per RFC 7009. Requires client authentication via HTTP Basic Auth or by including client_id and client_secret in the request body. Both methods are supported, but only HTTP Basic Auth is formally documented in OpenAPI security schemes.
      tags:
        - OAuth2
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to revoke (access or refresh token).
                token_type_hint:
                  type: string
                  enum: [access_token, refresh_token]
                  description: Optional hint about the type of the token submitted for revocation.
                client_id:
                  type: string
                  description: Client ID (if not using HTTP Basic Auth).
                client_secret:
                  type: string
                  description: Client secret (if not using HTTP Basic Auth).
              required:
                - token
      responses:
        '200':
          description: Token revoked (or token not found). Always returns 200 OK per RFC 7009.
          content:
            application/json:
              schema:
                type: object
                description: Empty object.
      security:
        - basicAuth: []
  /introspect:
    post:
      summary: OAuth2 Token Introspection Endpoint
      description: |
        Returns metadata about an access token or refresh token as per RFC 7662. Requires client authentication via HTTP Basic Auth or by including client_id and client_secret in the request body. Both methods are supported, but only HTTP Basic Auth is formally documented in OpenAPI security schemes.
      tags:
        - OAuth2
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The token to introspect (access or refresh token).
                token_type_hint:
                  type: string
                  enum: [access_token, refresh_token]
                  description: Optional hint about the type of the token submitted for introspection.
                client_id:
                  type: string
                  description: Client ID (if not using HTTP Basic Auth).
                client_secret:
                  type: string
                  description: Client secret (if not using HTTP Basic Auth).
              required:
                - token
      responses:
        '200':
          description: RFC 7662-compliant token introspection response
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                    description: Whether the token is active (not expired or revoked).
                  scope:
                    type: string
                    description: Space-separated list of scopes granted to the token.
                  client_id:
                    type: string
                    description: Client identifier for the token.
                  username:
                    type: string
                    description: Username of the resource owner.
                  exp:
                    type: integer
                    description: Expiry time (seconds since epoch).
                  iat:
                    type: integer
                    description: Issued-at time (seconds since epoch).
                  sub:
                    type: string
                    description: Subject of the token (usually username).
                  aud:
                    type: string
                    description: Audience for the token (usually client_id).
                  iss:
                    type: string
                    description: Issuer identifier.
                  token_type:
                    type: string
                    enum: [access_token, refresh_token]
                    description: Type of the token introspected.
      security:
        - basicAuth: []
  /.well-known/openid-configuration:
    get:
      summary: Get OIDC discovery document
      description: Returns the OpenID Connect discovery document describing all OAuth2/OIDC endpoints and supported features.
      operationId: getOIDCDiscovery
      tags:
        - OIDC
      responses:
        '200':
          description: OIDC discovery document
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                  authorization_endpoint:
                    type: string
                  token_endpoint:
                    type: string
                  userinfo_endpoint:
                    type: string
                  jwks_uri:
                    type: string
                  response_types_supported:
                    type: array
                    items:
                      type: string
                  subject_types_supported:
                    type: array
                    items:
                      type: string
                  id_token_signing_alg_values_supported:
                    type: array
                    items:
                      type: string
                  scopes_supported:
                    type: array
                    items:
                      type: string
                  grant_types_supported:
                    type: array
                    items:
                      type: string
                  claims_supported:
                    type: array
                    items:
                      type: string
                  token_endpoint_auth_methods_supported:
                    type: array
                    items:
                      type: string
  /authorize:
    get:
      summary: OAuth2 Authorization Endpoint
      description: |
        Initiates the OAuth2 authorization code flow. Accepts standard OAuth2 parameters via query string: response_type, client_id, redirect_uri, scope, state, and others as needed. Presents login and consent UI as appropriate.
      tags:
        - OAuth2
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
        - name: scope
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: false
          schema:
            type: string
        - name: code_challenge
          in: query
          required: false
          description: PKCE code challenge. Required for public clients using PKCE.
          schema:
            type: string
        - name: code_challenge_method
          in: query
          required: false
          description: PKCE code challenge method. Must be 'plain' or 'S256' if provided. Defaults to 'plain' if omitted.
          schema:
            type: string
            enum: [plain, S256]
      responses:
        '302':
          description: Redirect to client with authorization code or error.
        '400':
          description: Invalid request parameters.
        '401':
          description: Unauthorized (invalid client or user).
        '403':
          description: Consent denied.
  /token:
    post:
      summary: OAuth2 Token Endpoint
      description: |
        Exchanges authorization code for access and refresh tokens. Accepts standard OAuth2 parameters via x-www-form-urlencoded body: grant_type, code, redirect_uri, client_id, client_secret, code_verifier (for PKCE), etc.
      tags:
        - OAuth2
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code, refresh_token]
                code:
                  type: string
                redirect_uri:
                  type: string
                client_id:
                  type: string
                client_secret:
                  type: string
                code_verifier:
                  type: string
              required:
                - grant_type
      responses:
        '200':
          description: Token response (access, refresh, and optionally ID token).
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
                  refresh_token:
                    type: string
                  id_token:
                    type: string
        '400':
          description: Invalid request or parameters.
        '401':
          description: Unauthorized (invalid client or code).
        '403':
          description: Consent denied or invalid scopes.
  /sim/users:
    get:
      summary: List all users
      operationId: listUsers
      tags:
        - Server Management
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Server Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /sim/users/{username}:
    get:
      summary: Get a user by username
      operationId: getUser
      tags:
        - Server Management
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - Server Management
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                scopes:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - Server Management
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /sim/clients:
    get:
      summary: List all clients
      operationId: listClients
      tags:
        - Server Management
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
    post:
      summary: Create a new client
      operationId: createClient
      tags:
        - Server Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientInput'
      responses:
        '201':
          description: Client created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '409':
          description: Conflict - client already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /sim/clients/{clientId}:
    get:
      summary: Get a client by clientId
      operationId: getClient
      tags:
        - Server Management
      parameters:
        - in: path
          name: clientId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Client found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      summary: Update a client
      operationId: updateClient
      tags:
        - Server Management
      parameters:
        - in: path
          name: clientId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientSecret:
                  type: string
                redirectUris:
                  type: array
                  items:
                    type: string
                scopes:
                  type: array
                  items:
                    $ref: '#/components/schemas/ClientScope'
                refreshTokenLifetime:
                  type: integer
                  description: Lifetime of refresh tokens in milliseconds. If 0 or omitted, no expiry.
      responses:
        '200':
          description: Client updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      summary: Delete a client
      operationId: deleteClient
      tags:
        - Server Management
      parameters:
        - in: path
          name: clientId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Client deleted
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /sim/sessions:
    get:
      summary: List all active sessions
      operationId: listSessions
      tags:
        - Server Management
      responses:
        '200':
          description: List of sessions (tokens, auth codes, refresh tokens)
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    type: object
                  authCodes:
                    type: object
                  refreshTokens:
                    type: object
  /sim/config/jwt:
    get:
      summary: Get all JWT claims configuration
      operationId: getAllJWTClaims
      tags:
        - Server Management
      responses:
        '200':
          description: All JWT claims (globals, clients, users)
          content:
            application/json:
              schema:
                type: object
                properties:
                  globals:
                    type: object
                  clients:
                    type: object
                  users:
                    type: object
    post:
      summary: Update global JWT claims configuration
      operationId: updateGlobalJWTClaims
      tags:
        - Server Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                globals:
                  type: object
      responses:
        '200':
          description: Updated global JWT claims
          content:
            application/json:
              schema:
                type: object
                properties:
                  globals:
                    type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /sim/config/jwt/clients/{clientId}:
    post:
      summary: Update JWT claims for a client
      operationId: updateClientJWTClaims
      tags:
        - Server Management
      parameters:
        - in: path
          name: clientId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                claims:
                  type: object
      responses:
        '200':
          description: Updated JWT claims for client
          content:
            application/json:
              schema:
                type: object
                properties:
                  claims:
                    type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /sim/config/jwt/users/{userName}:
    post:
      summary: Update JWT claims for a user
      operationId: updateUserJWTClaims
      tags:
        - Server Management
      parameters:
        - in: path
          name: userName
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                claims:
                  type: object
      responses:
        '200':
          description: Updated JWT claims for user
          content:
            application/json:
              schema:
                type: object
                properties:
                  claims:
                    type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /sim/config/userinfo:
    get:
      summary: Get all userinfo claims configuration
      description: Returns the current userinfo claims configuration (global, per-client, per-user)
      tags: [Server Management]
      responses:
        '200':
          description: Current userinfo claims configuration
          content:
            application/json:
              schema:
                type: object
    post:
      summary: Update global userinfo claims configuration
      description: Updates the global userinfo claims-to-scope mapping
      tags: [Server Management]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated global userinfo claims configuration
          content:
            application/json:
              schema:
                type: object
  /sim/config/userinfo/clients/{clientId}:
    post:
      summary: Update userinfo claims for a client
      description: Updates the userinfo claims-to-scope mapping for a specific client
      tags: [Server Management]
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated client userinfo claims configuration
          content:
            application/json:
              schema:
                type: object
  /sim/config/userinfo/users/{userName}:
    post:
      summary: Update userinfo claims for a user
      description: Updates the userinfo claims-to-scope mapping for a specific user
      tags: [Server Management]
      parameters:
        - name: userName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated user userinfo claims configuration
          content:
            application/json:
              schema:
                type: object
  /sim/config/errors:
    get:
      summary: Get all active error simulation objects
      operationId: getErrorSimulations
      tags:
        - Error Simulation
      responses:
        '200':
          description: List of error simulation objects
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ErrorSimulation'
    post:
      summary: Set or update an error simulation for a target
      operationId: setErrorSimulation
      tags:
        - Error Simulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorSimulationInput'
      responses:
        '200':
          description: Error simulation set
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ErrorSimulation'
    delete:
      summary: Delete error simulation(s)
      operationId: deleteErrorSimulation
      tags:
        - Error Simulation
      parameters:
        - in: query
          name: target
          required: false
          schema:
            type: string
            description: Target endpoint (e.g. '/token' or 'all')
      responses:
        '200':
          description: Error simulation(s) deleted
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/ErrorSimulation'
  /sim/config/delays:
    get:
      summary: Get all active delay simulation objects
      operationId: getDelaySimulations
      tags:
        - Delay Simulation
      responses:
        '200':
          description: List of delay simulation objects
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/DelaySimulation'
    post:
      summary: Set or update a delay simulation for a target
      operationId: setDelaySimulation
      tags:
        - Delay Simulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelaySimulationInput'
      responses:
        '200':
          description: Delay simulation set
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/DelaySimulation'
    delete:
      summary: Delete delay simulation(s)
      operationId: deleteDelaySimulation
      tags:
        - Delay Simulation
      parameters:
        - in: query
          name: target
          required: false
          schema:
            type: string
            description: Target endpoint (e.g. '/token' or 'all')
      responses:
        '200':
          description: Delay simulation(s) deleted
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/DelaySimulation'
  /userinfo:
    get:
      summary: Get user claims based on scopes
      description: |
        Returns user claims permitted by the scopes in the access token. Requires a valid Bearer token. Claims are omitted if not present for the user. Returns 403 if no permitted claims for provided scopes.
      tags:
        - OIDC
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response with user claims
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '401':
          description: Invalid or missing token
        '403':
          description: Insufficient scopes
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
    UserInput:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
    Client:
      type: object
      required: [clientId, clientSecret, redirectUris, scopes]
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUris:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ClientScope'
        refreshTokenLifetime:
          type: integer
          description: Lifetime of refresh tokens in milliseconds. If 0 or omitted, no expiry.
    ClientInput:
      type: object
      required: [clientId, clientSecret, redirectUris, scopes]
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUris:
          type: array
          items:
            type: string
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ClientScope'
        refreshTokenLifetime:
          type: integer
          description: Lifetime of refresh tokens in milliseconds. If 0 or omitted, no expiry.
    ClientScope:
      type: object
      required: [name, description, consentNeeded]
      properties:
        name:
          type: string
        description:
          type: string
        consentNeeded:
          type: boolean
    ErrorSimulation:
      type: object
      properties:
        status:
          type: integer
        error:
          type: string
        error_description:
          type: string
    ErrorSimulationInput:
      type: object
      required:
        - target
        - status
        - error
      properties:
        target:
          type: string
          description: Target endpoint (e.g. '/token' or 'all')
        status:
          type: integer
        error:
          type: string
        error_description:
          type: string
    DelaySimulation:
      type: object
      properties:
        delay:
          type: integer
          description: Delay in milliseconds
    DelaySimulationInput:
      type: object
      required:
        - target
        - delay
      properties:
        target:
          type: string
          description: Target endpoint (e.g. '/token' or 'all')
        delay:
          type: integer
          description: Delay in milliseconds
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
